Day1 session:
=============
September-04-2021
-----------------
Listen, Write, Practice, Teach


IDE : Integrated Development Environment

1. Created a project (we have not pom.xml)
2. Create a package week1.day1
3. Create a class MyFirstJavaProgram


MyFirstJavaProgram:

Namimg Conventions:
1. Start with the capital letter
2. Each word should also start with the upper case
   (Pascal)
3. No special characters
4. No spaces

Class name : MyFirstJavProgram
File name : MyFirstJavProgram.java ( package Explorer)

Java reserved Keywords: 
   Bold purple
   LowerCase letters


Synatax:
public class MyFirstJavaProgram{

}

public static void main(String[] args) - see it later


Basic Data Types and Variables:
------------------------------
Naming Convention:
Camel case

First letter - lower case
Each word should also start with the upper case
                                              data type
Sheriba - name            - String               String
2       - number of kids  - integer              int
W / H   - work/Home maker - character            char
50.20   - weight          - fractional number    float/double
yes/no                    - boolean(true/false)  boolean


2 data types:
-------------
Primitive data type:
byte
short
int
float
double
char
boolean

Non-Primitive data type:
String
Arrays


Data type:
Variable:



Mobile Phone:

Properties/attributes/Variable:
synatx:

byte ramSize=8 ;
dataType variable = value;

Look and feel:

byte ramSize     - 8 

brandName   - SamsungNote20
colour      - blue
PixelSize   - 14
Screensize  - 5.5
weight         - 194
chargerPattern - C
isTouchscreen  - true  
OSSupports     - Android
cameraCount    - 4
costOfMobile   - 16999
mobileNumber   - 9945673922
IMEI           - 21093810928301283

CONTROL STATEMENTS:
===================

Selection/Conditional Statements:

if (condition) {
    // block of code if condition is true
} else {
   // block of code if condition is false
}

Program :
// if the number is odd or even

1. Get a number
2. Divide it by 2 
3. Check the remainder;
4. If(remainder is 0)
        number is even

======================================
classroom 3:
// Check the divisibilty by 3 and 5
number = 15;


int num = 15;

if(num%3 == 0 && num%5 == 0 )
divisble both by 3 and 5 " TRIZZ-FIZZ"

else if(num%3 == 0)
divisible by 3 - print "TRIZZ"

else if(num%5 == 0)
divisble by 5 - print as "FIZZ"


+ - *
a*b
a/b
a+b 
a-b


Iterative Statements/looping statements :
========================================

For loop:
--------

// print all the even numbers between 1 and 50


1. get the number
2. check if the number is even
3.  

for(i=1;i<=50;i++)
{
   if(i is even){   
      print the number is even
    }
}

Problem statement: Convert a negative number to positive number
---------------------------------------------------------------
Pseudocode:
-----------
1. Initialize an integer with a negative number
   like, int number = -40;
2. Check if the number is a negative number 
   Hint : any number that is lesser than zero is a negative number
3. If so, convert the number to a positive numer

Expected output : 40


Problem statement: Check if the number is positive or negative
---------------------------------------------------------------
Pseudocode:
----------
 1. Initialize a number, say, int number= 35;
 2. If a number is positive, print "The number is positive"
    If a number is negative, print "The number is negative"
    If it nether negative nor positive, print as "The number is neither positive nor negative"
    
 JUMPING STATEMENTS:
#1 : break
The break keyword is used to break out a for loop, a while loop or a switch block.
pgm 1 : 
print all the numbers as in the for loop. ( 1 to 10)
But quit the loop when the value is 5
		for (int i = 0; i < 7; i++) {
			if(i==5) {
			   break;
			}
		//	System.out.println(i);
		}

#2 : continue
The continue keyword is used to end the current iteration in a for loop (or a while loop), 
and continues to the next iteration
pgm 2: Print only odd numbers // Skip all the even numbers

		// print all odd numbers alone from 1 to 15
		// skip all the even  numbers
		
		for (int i = 0; i <= 15; i++) {
			if(i%2 == 0) {
				continue;
			}
			System.out.println(i);
		}

#3 : return
Takes the control out of the method.

		for (int i = 0; i < 10; i++) {
			System.out.println(i);
			
			if(!value) {
				return;
			}
		}

******************************************************
CLASSES AND OBJECTS:
-------------------
Class : Blueprint for the object. 
        IT is from this the objects are created/replicated

Object: An entity that has both state and behavior.
        It is an instance of the class

1)variables / properties:
  -----------------------
2)methods/actions:
  ----------------
  Access specifiers:
Who can access this ? or The extent upto which it can be accessed
To set access levels for classes, variables, methods, and constructors

ClassRoom:
==========
- Create package name as week1.day2
- Create a  new class as "MyMobile" under week1.day2
- create variables for the class
- Create 2 public methods (makeCall() , sendMsg()) with simple print statement
- Create a private method payBills() with simple print statement

- Create main method
- Create object for Mobile class and call the methods and variables using the object
- Execute the class and get the result in console

- Create a new class as MyKid in week1.day2 package
- Create an object for the previous class "MyMobile"
- Try to access all the 3 methods of class "MyMobile"
- Observe the access level of all the methods.( See if all the methods are called)

Methods with return values and arguments:
-----------------------------------------


ARRAYS:
 - Arrays are used to store multiple values in a single variable
 - Collection of similar type of elements which has contiguous memory location- 
 - We can store only a fixed number of elements in a Java array.
 - It doesn't grow its size at runtime.

# Syntax:
  dataType[] <variableName> = value

# How do I Access the each Element of an Array?
  -- By referring the index number

  Array indexes start with 0: [0] --> refers the first element

# To find the number of elements in an array
        Length of the array: array.length;
           length is a property
# Finding the first and the last elements: 

# How to access multiple elements at a time from array?
  - for
  - for each
 
# sorting the array:

# Exception :


Classroom:
Find the second largest number:
Find the second smallest number:

******************************************************************
week2 day 1 : 11-09-2020
Agenda:
1. Strings
2. Selenium webDriver Basics

STRINGS:
=======
A String in Java is actually an object
It contain methods that can perform certain operations on strings


How to create object for a string?


1. Using literals :
2. Using new keyword:

1. String Length                                     : str.length()
2. Find a character in a String                      : charAt()
3. Get the position of a character in the string     : indexOf()
4. Get the last position of a character in the string: lastIndexOf()
5. Convert a string to a character array             : toCharArray()
6. Convert a character array to string               : String.valueOf(chArr)

7. Change a string to UpperCase : str.toUpperCase()
8. Change a string to lowerCase : str.toUpperCase()

9. Change a character to UpperCase : Character.toUpperCase(chArr[i])
10.Change a character to lowerCase : Character.toLowerCase(chArr[i])

11. Compare two strngs             : str.equals(String) 	
12. str.contains()

Demo:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/classroom/string/CharOccurance.java
  - use charAt() and toCharArray()


String str = "welcome to chennai";
Problem statement:
Check number of occurrences of a char (eg 'e') in a String

1. declare the string
2. conevrt to char array
3. for loop -- char array
      if(chek if the incoming charcater is e) - count


ClassRoom:
https://github.com/TestLeafPages/SeleniumAssignments/blob/master/week1/day2/assignments/mandatory/ChangeOddIndexToUpperCase.java
   - toCharArray()
   - Character.toUpperCase()

for(){
    if(i%2 !=0){ // odd
      Character.toUppercase()
     syso()
       }
   else
      just print the character

}

*********************************
SELENIUM Basics:
---------------
1. Selenium Introduction:
---------------------------
Web Automation tool : Only web applications can be automated
Open source : 
Multiple Browsers: 
   IE
   Firefox
   Chrome
   Edge
   Safari
   Opera
Multiple Languages:
   java
   C#
   Python
   Ruby
   Perl

2. Selenium Internal architecture:
4 components:

Selenium RC (RemoteControl)
Selenium IDE
Selenium WebDriver:
Selenium grid

3. How to set up your work environment?
***************************************
3. How to set up your work environment?
	Open a Maven Project
	Update with the dependencies required in pom.xml
          (Project Object Model or POM is the fundamental unit of work in Maven)
	What is POM.xml?
		The POM is an XML document contains information about the project and various configuration detail 
	What are dependencies?
		Dependencies are external JAR files (Java libraries) that the project uses
        Maven dependendencies in your local repository --> .m2
	Force update in case pom.xml throws an error.

Dependences required:
1. selenium-java ( client - language)

2. WebDriverManager dependency:
 Automatically manages the drivers
 1. Download the driver in your local machine
 2. Download the driver that matches the browser version
3. commons io

****************************************

READY TO CODE!!!!
  *****Launch the browser*******

1. WebDriverManager 
2. Instantiate the driver
3. driver.get()
    Exception in thread "main" org.openqa.selenium.InvalidArgumentException: invalid argument
4. driver.manage.windows.maximize();
4. driver.getTitle()
5. driver.close()
      socketException

********************************************

http://leaftaps.com/opentaps/control/main
username : demosalesmanager
password : crmsfa

1. Enter the username
2. Enter the password
3. Click on the login button

web elements:

Element Location Strategies:
***************************

HTML:

root tag : <html> 
DOM: Document Object Model
HTML tags:
---------
<html>
<div>
<a>
<label>
<input>
<button>
<table>
<select>
<option>


Structure of HTML element:
=========================
1. Tag               : Tagname : purple text  / Mandatory   
2. Attributes        : Orange                 / Optional
3. Attribute values  : Blue text              / Optional
4. Text              : Black                  / Optional


How to locate the web element?

Locators:(selenium)
Where do we find the locators: HTML code ( devTools)

1. id    (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, auto generated numbers (eg) : ext-gen603 ext-gen612
2. name  (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates
3. class (optional) : Attribute
                      Use:     Unique 
                      Not use: Duplicates, No space 
4. LinkText:          <a> - anchor tag + text
5. text() :        Optional
                    Black 
6. tagname:       Mandatory
7. Xpath: 
8. CSS locator  - NO

Steps to locate a web element:
=============================

1. Find the web element

driver.findElement(By by):
  Find the first web element using the given method
  Returns the first matching element on the current context

  If no matching elements are found, 
     throws NoSuchElementException 

  1. driver - represents the browser
  2. Web element - represents a DOM node

2. Perform the action on it:

   ********* Login Test case*******
url: http://leaftaps.com/opentaps
username: demosalesmanager
password: crmsfa


STEPS FOR LOGIN TEST CASE
*************************

// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Click CRM/SFA link























KeyBorad short cuts:

Format the code:
cntrl  shft  f

ctrl+space

Execute: 

RightClick --> RUnAs --> java applcation
Cntrl f11



















ClassRoom:
---------
Check the divisibilty by 3 or 5
1. If the number is divisible by 3 , print TRIZZ
2. If the number is divisible by 5 , print FIZZ
3. If the number is divisible both by 3 and 5 , print TRIZZ-FIZZ

Switch Case:










